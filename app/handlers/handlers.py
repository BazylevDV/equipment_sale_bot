from aiogram import Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import app.keyboards as kb
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramAPIError
import asyncio
from app.file_paths import FILE_PATHS, MIME_TYPES  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from db import create_connection, create_request, check_unique_request  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import logging

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger('root')


class EmailRequest(StatesGroup):
    email = State()


async def send_welcome_message(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ –æ—Ç–¥–µ–ª–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É '–ó–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å', —Ç–æ –í–∞–º —Å—é–¥–∞:")
    main_menu = kb.get_main_menu()
    await message.answer('–í–Ω–∏–∑—É –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é. ‚ú®', reply_markup=main_menu)


def setup_handlers(dp: Dispatcher):
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message, state: FSMContext):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º")
        await send_welcome_message(message, state)

    @dp.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è üóÇÔ∏è")
    async def catalog_handler(message: types.Message):
        file_path = FILE_PATHS.get("catalog")  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
        if file_path:
            file = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
            await message.answer_document(file)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
            await message.answer("–í–æ—Ç –≤–∞—à –∫–∞—Ç–∞–ª–æ–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è! üóÇÔ∏è")
        else:
            await message.answer("–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–∞–ª–æ–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    @dp.message(F.text == "–°–∫–ª–∞–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üè¨")
    async def warehouse_handler(message: types.Message):
        file_path = FILE_PATHS.get("warehouse")  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫–ª–∞–¥–∞
        if file_path:
            file = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
            await message.answer_document(file)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
            await message.answer("–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üè¨")
        else:
            await message.answer("–§–∞–π–ª —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

    @dp.message(F.text == "–£—Å–ø–µ–π –∫—É–ø–∏—Ç—å –ø–æ –∞–∫—Ü–∏–∏-1 ‚òéÔ∏è")
    async def promo_handler_1(message: types.Message):
        file_path = FILE_PATHS.get("promo1")  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞–∫—Ü–∏–∏-1
        if file_path:
            file = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
            await message.answer_document(file)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
            await message.answer("–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–∫—Ü–∏–∏-1! ‚òéÔ∏è")
        else:
            await message.answer("–§–∞–π–ª –∞–∫—Ü–∏–∏-1 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–∫—Ü–∏–∏-1")

    @dp.message(F.text == "–£—Å–ø–µ–π –∫—É–ø–∏—Ç—å –ø–æ –∞–∫—Ü–∏–∏-2 ‚òéÔ∏è")
    async def promo_handler_2(message: types.Message):
        file_path = FILE_PATHS.get("promo2")  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞–∫—Ü–∏–∏-2
        if file_path:
            file = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
            await message.answer_document(file)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
            await message.answer("–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–∫—Ü–∏–∏-2! ‚òéÔ∏è")
        else:
            await message.answer("–§–∞–π–ª –∞–∫—Ü–∏–∏-2 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–∫—Ü–∏–∏-2")

    @dp.message(F.text == "–û –Ω–∞—Å üìù")
    async def info_handler(message: types.Message):
        info_text = (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç–¥–µ–ª–∞ –º–µ–¥.–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —á–µ–ª—è–±–∏–Ω—Å–∫–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –≥—Ä—É–ø–ø—ã '–ü–∞—Ä–∏—Ç–µ—Ç'!* üè•\n\n"
            "üìù *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:* \n"
            " –ú—ã —Ü–µ–Ω–∏–º –í–∞—à–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏ –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –í–∞–º —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:* \n"
            "- üèôÔ∏è –ß–µ–ª—è–±–∏–Ω—Å–∫, –û–û–û '–ü–∞—Ä–∏—Ç–µ—Ç-–ß–µ–ª—è–±–∏–Ω—Å–∫' —É–ª. –ü–æ—Å—Ç—ã—à–µ–≤–∞ –¥.2 –æ—Ñ–∏—Å 204, 101\n"
            "- üìû –ì–æ—Ä–æ–¥—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞:\n"
            "   - +7-351-274-40-17\n"
            "   - +7-351-274-40-19\n"
            "- üî¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞:\n"
            "   - 120\n"
            "   - 121\n"
            "   - 107\n\n"
            "üìß *–ó–∞—è–≤–∫–∏ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∏ —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞: @ParitetReceptionBot* \n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ö–ü –Ω–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –±–æ—Ç–∞ –º–µ–Ω—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é, –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ –∏ —Ü–µ–Ω–∞–º , –ø–æ—ç—Ç–æ–º—É –Ω–µ  —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–µ—Ä—Ç–æ–π, —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é."
        )
        await message.answer(info_text, parse_mode="Markdown")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏")

    async def remind_user(message: types.Message, state: FSMContext):
        await asyncio.sleep(60 * 5)  # 5 –º–∏–Ω—É—Ç
        data = await state.get_data()
        if data.get("email") is None:
            await message.answer(
                "–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å?")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.reminder_keyboard())

    @dp.callback_query(F.data == "continue")
    async def continue_session(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ–∞–Ω—Å. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ–∞–Ω—Å")

    @dp.callback_query(F.data == "finish")
    async def finish_session(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await state.clear()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º clear() –≤–º–µ—Å—Ç–æ finish() –≤ aiogram 3.x
        await callback_query.message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!",
                                            reply_markup=kb.get_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ–∞–Ω—Å")

    @dp.message(StateFilter(EmailRequest.email))
    async def start_reminder(message: types.Message, state: FSMContext):
        asyncio.create_task(remind_user(message, state))
        await asyncio.sleep(0)  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ

    @dp.message(Command("admin"))
    async def admin_panel(message: types.Message):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if message.from_user.id == int(os.getenv("ADMIN_CHAT_ID")):
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_keyboard())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
